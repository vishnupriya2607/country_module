{"ast":null,"code":"const baseUrl = 'http://localhost:5000/api'; // Replace with your backend API URL\n\n// Country API calls\nexport const getCountries = async () => {\n  const response = await fetch(`${baseUrl}/countries`);\n  return response.json();\n};\nexport const addCountry = async name => {\n  const response = await fetch(`${baseUrl}/countries`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      name\n    })\n  });\n  return response.json();\n};\nexport const updateCountry = async (id, name) => {\n  const response = await fetch(`${baseUrl}/countries/${id}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      name\n    })\n  });\n  return response.json();\n};\nexport const deleteCountry = async id => {\n  const response = await fetch(`${baseUrl}/countries/${id}`, {\n    method: 'DELETE'\n  });\n  return response.json();\n};\n\n// State API calls\nexport const getStates = async () => {\n  const response = await fetch(`${baseUrl}/states`);\n  return response.json();\n};\nexport const getStatesByCountryId = async countryId => {\n  const response = await fetch(`${baseUrl}/states/${countryId}`);\n  return response.json();\n};\nexport const addState = async (name, countryId) => {\n  const response = await fetch(`${baseUrl}/states`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      name,\n      countryId\n    })\n  });\n  return response.json();\n};\nexport const updateState = async (id, name, countryId) => {\n  const response = await fetch(`${baseUrl}/states/${id}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      name,\n      countryId\n    })\n  });\n  return response.json();\n};\nexport const deleteState = async id => {\n  const response = await fetch(`${baseUrl}/states/${id}`, {\n    method: 'DELETE'\n  });\n  return response.json();\n};\n\n// City API calls\nexport const getCities = async () => {\n  const response = await fetch(`${baseUrl}/cities`);\n  return response.json();\n};\nexport const getCitiesByStateId = async stateId => {\n  try {\n    const response = await fetch(`${baseUrl}/cities/${stateId}`);\n    if (!response.ok) {\n      throw new Error('Failed to fetch cities');\n    }\n    return response.json();\n  } catch (error) {\n    console.error('Error fetching cities:', error);\n    throw error; // Optionally handle or rethrow the error as needed\n  }\n};\nexport const addCity = async (name, stateId) => {\n  const response = await fetch(`${baseUrl}/cities`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      name,\n      stateId\n    })\n  });\n  return response.json();\n};\nexport const updateCity = async (id, name, stateId) => {\n  const response = await fetch(`${baseUrl}/cities/${id}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      name,\n      stateId\n    })\n  });\n  return response.json();\n};\nexport const deleteCity = async id => {\n  const response = await fetch(`${baseUrl}/cities/${id}`, {\n    method: 'DELETE'\n  });\n  return response.json();\n};","map":{"version":3,"names":["baseUrl","getCountries","response","fetch","json","addCountry","name","method","headers","body","JSON","stringify","updateCountry","id","deleteCountry","getStates","getStatesByCountryId","countryId","addState","updateState","deleteState","getCities","getCitiesByStateId","stateId","ok","Error","error","console","addCity","updateCity","deleteCity"],"sources":["C:/Users/Vishnu Priya/OneDrive/Desktop/food/frontend/src/api.js"],"sourcesContent":["const baseUrl = 'http://localhost:5000/api'; // Replace with your backend API URL\r\n\r\n// Country API calls\r\nexport const getCountries = async () => {\r\n  const response = await fetch(`${baseUrl}/countries`);\r\n  return response.json();\r\n};\r\n\r\nexport const addCountry = async (name) => {\r\n  const response = await fetch(`${baseUrl}/countries`, {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n    body: JSON.stringify({ name }),\r\n  });\r\n  return response.json();\r\n};\r\n\r\nexport const updateCountry = async (id, name) => {\r\n  const response = await fetch(`${baseUrl}/countries/${id}`, {\r\n    method: 'PUT',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n    body: JSON.stringify({ name }),\r\n  });\r\n  return response.json();\r\n};\r\n\r\nexport const deleteCountry = async (id) => {\r\n  const response = await fetch(`${baseUrl}/countries/${id}`, {\r\n    method: 'DELETE',\r\n  });\r\n  return response.json();\r\n};\r\n\r\n// State API calls\r\nexport const getStates = async () => {\r\n  const response = await fetch(`${baseUrl}/states`);\r\n  return response.json();\r\n};\r\n\r\nexport const getStatesByCountryId = async (countryId) => {\r\n  const response = await fetch(`${baseUrl}/states/${countryId}`);\r\n  return response.json();\r\n};\r\n\r\nexport const addState = async (name, countryId) => {\r\n  const response = await fetch(`${baseUrl}/states`, {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n    body: JSON.stringify({ name, countryId }),\r\n  });\r\n  return response.json();\r\n};\r\n\r\nexport const updateState = async (id, name, countryId) => {\r\n  const response = await fetch(`${baseUrl}/states/${id}`, {\r\n    method: 'PUT',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n    body: JSON.stringify({ name, countryId }),\r\n  });\r\n  return response.json();\r\n};\r\n\r\nexport const deleteState = async (id) => {\r\n  const response = await fetch(`${baseUrl}/states/${id}`, {\r\n    method: 'DELETE',\r\n  });\r\n  return response.json();\r\n};\r\n\r\n// City API calls\r\nexport const getCities = async () => {\r\n  const response = await fetch(`${baseUrl}/cities`);\r\n  return response.json();\r\n};\r\n\r\nexport const getCitiesByStateId = async (stateId) => {\r\n  try {\r\n    const response = await fetch(`${baseUrl}/cities/${stateId}`);\r\n    if (!response.ok) {\r\n      throw new Error('Failed to fetch cities');\r\n    }\r\n    return response.json();\r\n  } catch (error) {\r\n    console.error('Error fetching cities:', error);\r\n    throw error; // Optionally handle or rethrow the error as needed\r\n  }\r\n};\r\n\r\nexport const addCity = async (name, stateId) => {\r\n  const response = await fetch(`${baseUrl}/cities`, {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n    body: JSON.stringify({ name, stateId }),\r\n  });\r\n  return response.json();\r\n};\r\n\r\nexport const updateCity = async (id, name, stateId) => {\r\n  const response = await fetch(`${baseUrl}/cities/${id}`, {\r\n    method: 'PUT',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n    body: JSON.stringify({ name, stateId }),\r\n  });\r\n  return response.json();\r\n};\r\n\r\nexport const deleteCity = async (id) => {\r\n  const response = await fetch(`${baseUrl}/cities/${id}`, {\r\n    method: 'DELETE',\r\n  });\r\n  return response.json();\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}