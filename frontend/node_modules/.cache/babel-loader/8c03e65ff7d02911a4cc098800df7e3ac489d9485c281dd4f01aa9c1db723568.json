{"ast":null,"code":"const baseUrl = '/api';\nconst handleResponse = async response => {\n  if (!response.ok) {\n    const errorText = await response.text();\n    console.error(`Error response: ${errorText}`);\n    throw new Error(`HTTP error! status: ${response.status}`);\n  }\n  try {\n    return await response.json();\n  } catch (error) {\n    console.error('Error parsing JSON:', error);\n    throw new Error('Invalid JSON response');\n  }\n};\nexport const getCountries = async () => {\n  const response = await fetch(`${baseUrl}/countries`);\n  return handleResponse(response);\n};\nexport const addCountry = async name => {\n  const response = await fetch(`${baseUrl}/countries`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      name\n    })\n  });\n  return handleResponse(response);\n};\nexport const updateCountry = async (id, name) => {\n  const response = await fetch(`${baseUrl}/countries/${id}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      name\n    })\n  });\n  return handleResponse(response);\n};\nexport const deleteCountry = async id => {\n  const response = await fetch(`${baseUrl}/countries/${id}`, {\n    method: 'DELETE'\n  });\n  return handleResponse(response);\n};\nexport const getStates = async () => {\n  const response = await fetch(`${baseUrl}/states`);\n  return handleResponse(response);\n};\nexport const addState = async (name, countryId) => {\n  const response = await fetch(`${baseUrl}/states`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      name,\n      countryId\n    })\n  });\n  return handleResponse(response);\n};\nexport const updateState = async (id, name, countryId) => {\n  const response = await fetch(`${baseUrl}/states/${id}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      name,\n      countryId\n    })\n  });\n  return handleResponse(response);\n};\nexport const deleteState = async id => {\n  const response = await fetch(`${baseUrl}/states/${id}`, {\n    method: 'DELETE'\n  });\n  return handleResponse(response);\n};\nexport const getCities = async () => {\n  const response = await fetch(`${baseUrl}/cities`);\n  return handleResponse(response);\n};\nexport const addCity = async (name, stateId) => {\n  const response = await fetch(`${baseUrl}/cities`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      name,\n      stateId\n    })\n  });\n  return handleResponse(response);\n};\nexport const updateCity = async (id, name, stateId) => {\n  const response = await fetch(`${baseUrl}/cities/${id}`, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      name,\n      stateId\n    })\n  });\n  return handleResponse(response);\n};\nexport const deleteCity = async id => {\n  const response = await fetch(`${baseUrl}/cities/${id}`, {\n    method: 'DELETE'\n  });\n  return handleResponse(response);\n};","map":{"version":3,"names":["baseUrl","handleResponse","response","ok","errorText","text","console","error","Error","status","json","getCountries","fetch","addCountry","name","method","headers","body","JSON","stringify","updateCountry","id","deleteCountry","getStates","addState","countryId","updateState","deleteState","getCities","addCity","stateId","updateCity","deleteCity"],"sources":["C:/Users/Vishnu Priya/OneDrive/Desktop/food/frontend/src/api.js"],"sourcesContent":["const baseUrl = '/api';\r\n\r\nconst handleResponse = async (response) => {\r\n  if (!response.ok) {\r\n    const errorText = await response.text();\r\n    console.error(`Error response: ${errorText}`);\r\n    throw new Error(`HTTP error! status: ${response.status}`);\r\n  }\r\n  try {\r\n    return await response.json();\r\n  } catch (error) {\r\n    console.error('Error parsing JSON:', error);\r\n    throw new Error('Invalid JSON response');\r\n  }\r\n};\r\n\r\nexport const getCountries = async () => {\r\n  const response = await fetch(`${baseUrl}/countries`);\r\n  return handleResponse(response);\r\n};\r\n\r\nexport const addCountry = async (name) => {\r\n  const response = await fetch(`${baseUrl}/countries`, {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n    body: JSON.stringify({ name }),\r\n  });\r\n  return handleResponse(response);\r\n};\r\n\r\nexport const updateCountry = async (id, name) => {\r\n  const response = await fetch(`${baseUrl}/countries/${id}`, {\r\n    method: 'PUT',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n    body: JSON.stringify({ name }),\r\n  });\r\n  return handleResponse(response);\r\n};\r\n\r\nexport const deleteCountry = async (id) => {\r\n  const response = await fetch(`${baseUrl}/countries/${id}`, {\r\n    method: 'DELETE',\r\n  });\r\n  return handleResponse(response);\r\n};\r\n\r\nexport const getStates = async () => {\r\n  const response = await fetch(`${baseUrl}/states`);\r\n  return handleResponse(response);\r\n};\r\n\r\nexport const addState = async (name, countryId) => {\r\n  const response = await fetch(`${baseUrl}/states`, {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n    body: JSON.stringify({ name, countryId }),\r\n  });\r\n  return handleResponse(response);\r\n};\r\n\r\nexport const updateState = async (id, name, countryId) => {\r\n  const response = await fetch(`${baseUrl}/states/${id}`, {\r\n    method: 'PUT',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n    body: JSON.stringify({ name, countryId }),\r\n  });\r\n  return handleResponse(response);\r\n};\r\n\r\nexport const deleteState = async (id) => {\r\n  const response = await fetch(`${baseUrl}/states/${id}`, {\r\n    method: 'DELETE',\r\n  });\r\n  return handleResponse(response);\r\n};\r\n\r\nexport const getCities = async () => {\r\n  const response = await fetch(`${baseUrl}/cities`);\r\n  return handleResponse(response);\r\n};\r\n\r\nexport const addCity = async (name, stateId) => {\r\n  const response = await fetch(`${baseUrl}/cities`, {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n    body: JSON.stringify({ name, stateId }),\r\n  });\r\n  return handleResponse(response);\r\n};\r\n\r\nexport const updateCity = async (id, name, stateId) => {\r\n  const response = await fetch(`${baseUrl}/cities/${id}`, {\r\n    method: 'PUT',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n    body: JSON.stringify({ name, stateId }),\r\n  });\r\n  return handleResponse(response);\r\n};\r\n\r\nexport const deleteCity = async (id) => {\r\n  const response = await fetch(`${baseUrl}/cities/${id}`, {\r\n    method: 'DELETE',\r\n  });\r\n  return handleResponse(response);\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}